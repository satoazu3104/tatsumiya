{"version":3,"file":"assets/js/blocks/interview.js","mappings":"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","sources":["webpack://portart/external window [\"wp\",\"blocks\"]","webpack://portart/external window [\"wp\",\"blockEditor\"]","webpack://portart/external window [\"wp\",\"components\"]","webpack://portart/./src/js/blocks/interview.js"],"sourcesContent":["var __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"blocks\"];","var __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"blockEditor\"];","var __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"components\"];","// src/js/blocks/interview/index.js\n\nimport { registerBlockType } from '@wordpress/blocks';\nimport {\n    InspectorControls,\n    RichText,\n    useBlockProps,\n    MediaUpload,\n    MediaUploadCheck,\n} from '@wordpress/block-editor';\nimport {\n    PanelBody,\n    Button,\n    TextControl,\n} from '@wordpress/components';\n\nregisterBlockType('portart/interview', {\n    title: 'Interview',\n    icon: 'admin-users',\n    category: 'layout',\n    attributes: {\n        iconUrl: {\n            type: 'string',\n            default: '',     // 回答前に表示するアイコン\n        },\n        qaList: {\n            type: 'array',\n            default: [\n                { question: '', answer: '' },\n            ],\n        },\n    },\n\n    edit: ({ attributes, setAttributes }) => {\n        const { iconUrl, qaList } = attributes;\n        const blockProps = useBlockProps();\n\n        // アイテム追加\n        const addItem = () => {\n            setAttributes({\n                qaList: [...qaList, { question: '', answer: '' }],\n            });\n        };\n        // アイテム削除\n        const removeItem = (idx) => {\n            const newList = qaList.filter((_, i) => i !== idx);\n            setAttributes({ qaList: newList });\n        };\n        // 質問・回答の変更\n        const updateItem = (idx, key, val) => {\n            const newList = qaList.map((item, i) =>\n                i === idx ? { ...item, [key]: val } : item\n            );\n            setAttributes({ qaList: newList });\n        };\n\n        return (\n            <div {...blockProps}>\n                <InspectorControls>\n                    <PanelBody title=\"回答アイコン\">\n                        <MediaUploadCheck>\n                            <MediaUpload\n                                onSelect={(media) =>\n                                    setAttributes({ iconUrl: media.url })\n                                }\n                                allowedTypes={['image']}\n                                value={iconUrl}\n                                render={({ open }) =>\n                                    iconUrl ? (\n                                        <div style={{ textAlign: 'center' }}>\n                                            <img\n                                                src={iconUrl}\n                                                style={{ maxWidth: '100%', height: 'auto' }}\n                                                alt=\"\"\n                                            />\n                                            <Button\n                                                isLink\n                                                isDestructive\n                                                onClick={() =>\n                                                    setAttributes({ iconUrl: '' })\n                                                }\n                                            >\n                                                削除\n                                            </Button>\n                                        </div>\n                                    ) : (\n                                        <Button onClick={open} isPrimary>\n                                            アイコンを選択\n                                        </Button>\n                                    )\n                                }\n                            />\n                        </MediaUploadCheck>\n                    </PanelBody>\n                </InspectorControls>\n\n                {/* Q&A 一覧 */}\n                {qaList.map((item, idx) => (\n                    <div\n                        key={idx}\n                        style={{\n                            border: '1px solid #ddd',\n                            padding: '1rem',\n                            marginBottom: '1rem',\n                        }}\n                    >\n                        <TextControl\n                            label={`質問 #${idx + 1}`}\n                            value={item.question}\n                            onChange={(val) =>\n                                updateItem(idx, 'question', val)\n                            }\n                        />\n                        <RichText\n                            tagName=\"p\"\n                            className=\"interview-answer__text\"\n                            placeholder={'回答を入力…'}\n                            value={item.answer}\n                            onChange={(val) => updateItem(idx, 'answer', val)}\n                        />\n                        <Button\n                            isLink\n                            isDestructive\n                            onClick={() => removeItem(idx)}\n                        >\n                            この Q&A を削除\n                        </Button>\n                    </div>\n                ))}\n\n                <Button isSecondary onClick={addItem}>\n                    Q&A を追加\n                </Button>\n            </div>\n        );\n    },\n\n    save: ({ attributes }) => {\n        const { iconUrl, qaList } = attributes;\n        const blockProps = useBlockProps.save();\n\n        return (\n            <>\n                <div className='l-list__qa-group'>\n                    {qaList.map((item, idx) => (\n                        <div className=\"l-list__qa\" key={idx}>\n                            <div className='c-item__ques js-scroll-up'>\n                                <div className='p-img__ques'></div>\n                                <div className='l-wrap__ques'>\n                                    <h4 className=\"p-text__body\">\n                                        {item.question}\n                                    </h4>\n                                </div>\n                            </div>\n\n                            <div className=\"c-item__answer js-scroll-up\">\n                                {iconUrl && (\n                                    <img\n                                        src={iconUrl}\n                                        className=\"p-img__answer\"\n                                        alt=\"\"\n                                    />\n                                )}\n                                <div className='l-wrap__answer'>\n                                    <RichText.Content\n                                        tagName=\"p\"\n                                        className=\"p-text__body\"\n                                        value={item.answer}\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                    ))}\n                </div>\n            </>\n        );\n    },\n});\n\n"],"names":["window","registerBlockType","title","icon","category","attributes","iconUrl","type","default","qaList","question","answer","edit","setAttributes","blockProps","useBlockProps","updateItem","idx","key","val","newList","map","item","i","wp","element","createElement","_extends","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","InspectorControls","PanelBody","MediaUploadCheck","MediaUpload","onSelect","media","url","allowedTypes","value","render","open","style","textAlign","src","maxWidth","height","alt","Button","isLink","isDestructive","onClick","isPrimary","border","padding","marginBottom","TextControl","label","onChange","RichText","tagName","className","placeholder","filter","_","removeItem","isSecondary","addItem","save","Fragment","Content"],"sourceRoot":""}